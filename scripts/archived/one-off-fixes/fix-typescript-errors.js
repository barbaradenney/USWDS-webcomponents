#!/usr/bin/env node

/**
 * Fix TypeScript Errors from Progressive Enhancement Script
 *
 * Cleans up malformed code generated by the progressive enhancement script
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

class TypeScriptErrorFixer {
  constructor() {
    this.srcDir = path.join(__dirname, '../../src/components');
    this.fixedCount = 0;
  }

  /**
   * Fix TypeScript errors in all components
   */
  async fixAllErrors() {
    console.log('üîß Fixing TypeScript errors from progressive enhancement script...\n');

    const components = fs.readdirSync(this.srcDir)
      .filter(item => {
        const itemPath = path.join(this.srcDir, item);
        return fs.statSync(itemPath).isDirectory();
      });

    for (const component of components) {
      this.fixComponentErrors(component);
    }

    console.log(`\n‚úÖ Fixed ${this.fixedCount} components with TypeScript errors`);
  }

  /**
   * Fix TypeScript errors for a specific component
   */
  fixComponentErrors(componentName) {
    const componentFile = path.join(this.srcDir, componentName, `usa-${componentName}.ts`);

    if (!fs.existsSync(componentFile)) {
      return;
    }

    let content = fs.readFileSync(componentFile, 'utf8');
    let modified = false;

    // Remove malformed USWDS method calls with invalid syntax
    const badPatterns = [
      // Fix malformed USWDS calls like "group - 5 === group"
      /if \(USWDS\.\w+ && typeof USWDS\.\w+\.\w+ - \d+ === \w+\.\w+\.\w+ === 'function'\)/g,

      // Fix undefined variable references
      /USWDS\.\w+\.\w+ - \d+ === \w+/g,

      // Fix calls to undefined variables
      /if \(USWDS\.\w+ && typeof \w+ - \d+ === \w+\.\w+\.\w+ === 'function'\)/g,

      // Remove lines with undefined variables like "group - 5 === group"
      /.*\w+ - \d+ === \w+.*\n/g,

      // Remove malformed method calls
      /.*Cannot find name '\w+'.*\n/g,
    ];

    for (const pattern of badPatterns) {
      if (content.match(pattern)) {
        content = content.replace(pattern, '');
        modified = true;
      }
    }

    // Fix specific broken method patterns
    const brokenMethods = [
      // Fix malformed if conditions
      {
        pattern: /if \(USWDS\.\w+ && typeof [^}]+\) \{[\s\S]*?\n\s*\}/g,
        replacement: ''
      },

      // Remove unused function declarations
      {
        pattern: /initializeUSWDS\w+' is declared but its value is never read/g,
        replacement: ''
      }
    ];

    for (const fix of brokenMethods) {
      if (content.match(fix.pattern)) {
        content = content.replace(fix.pattern, fix.replacement);
        modified = true;
      }
    }

    // Clean up any malformed progressive enhancement methods
    if (content.includes('initializeUSWDS') && content.includes('Cannot find name')) {
      // Remove the entire malformed method
      content = content.replace(/private async initializeUSWDS\w+\(\) \{[\s\S]*?\n {2}\}/g, '');
      // Remove the call to the method
      content = content.replace(/this\.initializeUSWDS\w+\(\);?\n?/g, '');
      modified = true;
    }

    if (modified) {
      fs.writeFileSync(componentFile, content);
      console.log(`üìÅ Fixed TypeScript errors: ${componentName}`);
      this.fixedCount++;
    }
  }
}

// CLI execution
if (import.meta.url === `file://${process.argv[1]}`) {
  const fixer = new TypeScriptErrorFixer();
  fixer.fixAllErrors().catch(console.error);
}

export default TypeScriptErrorFixer;