#!/usr/bin/env sh
# Husky post-commit hook for automatic changelog and testing documentation updates

# Get the latest commit hash and message
COMMIT_HASH=$(git rev-parse HEAD)
COMMIT_MESSAGE=$(git log -1 --pretty=%s)

# Skip if this commit was already generated by the post-commit hook to prevent infinite recursion
if echo "$COMMIT_MESSAGE" | grep -q "🤖 Generated by post-commit hook"; then
  echo "🔄 Post-commit: Skipping hook-generated commit to prevent recursion"
  exit 0
fi

# Skip if this is a docs-only commit that doesn't affect components
if echo "$COMMIT_MESSAGE" | grep -q "^docs: update component changelogs"; then
  echo "🔄 Post-commit: Skipping changelog-only commit"
  exit 0
fi

if echo "$COMMIT_MESSAGE" | grep -q "^docs: update component testing documentation"; then
  echo "🔄 Post-commit: Skipping testing docs-only commit"
  exit 0
fi

if echo "$COMMIT_MESSAGE" | grep -q "^docs: update.*Storybook documentation"; then
  echo "🔄 Post-commit: Skipping Storybook docs-only commit"
  exit 0
fi

if echo "$COMMIT_MESSAGE" | grep -q "^chore: archive obsolete documentation"; then
  echo "🔄 Post-commit: Skipping doc cleanup commit"
  exit 0
fi

# Check for component file changes (for changelog updates)
COMPONENT_CHANGES=$(git diff-tree --no-commit-id --name-only -r $COMMIT_HASH | grep "^src/components/" | grep -v -E "(CHANGELOG\.md|TESTING\.md|\.docs\.mdx)" | wc -l)

# Check for test file changes (for testing documentation updates)
TEST_CHANGES=$(git diff-tree --no-commit-id --name-only -r $COMMIT_HASH | grep -E "\.(test|cy|stories)\.ts$" | wc -l)

# Check for documentation file changes (for Storybook docs updates)
DOCS_CHANGES=$(git diff-tree --no-commit-id --name-only -r $COMMIT_HASH | grep -E "(README\.md|CHANGELOG\.md|TESTING\.md)$" | wc -l)

# Skip if no relevant changes
if [ "$COMPONENT_CHANGES" -eq 0 ] && [ "$TEST_CHANGES" -eq 0 ] && [ "$DOCS_CHANGES" -eq 0 ]; then
  echo "🔄 Post-commit: No component, test, or documentation file changes detected, skipping updates"
  exit 0
fi

CHANGELOG_UPDATED=false
README_UPDATED=false

# Update changelogs if component files changed
if [ "$COMPONENT_CHANGES" -gt 0 ]; then
  echo "🔄 Post-commit: Updating component changelogs for $COMPONENT_CHANGES component file changes..."
  node scripts/maintenance/manage-changelogs.js process-commit "$COMMIT_HASH" "$COMMIT_MESSAGE"
  
  if ! git diff --quiet --exit-code src/components/*/CHANGELOG.md 2>/dev/null; then
    echo "📝 Changelogs updated"
    CHANGELOG_UPDATED=true
  fi
fi

# Update README files if component files changed
if [ "$COMPONENT_CHANGES" -gt 0 ]; then
  echo "📖 Post-commit: Updating component README files for $COMPONENT_CHANGES component file changes..."
  node scripts/maintenance/manage-readmes.js process-commit "$COMMIT_HASH" "$COMMIT_MESSAGE"
  
  if ! git diff --quiet --exit-code src/components/*/README.md 2>/dev/null; then
    echo "📖 README files updated"
    README_UPDATED=true
  fi
fi

TESTING_DOCS_UPDATED=false

# Update testing docs if test files changed
if [ "$TEST_CHANGES" -gt 0 ]; then
  echo "📋 Post-commit: Updating testing documentation for $TEST_CHANGES test file changes..."
  node scripts/maintenance/manage-testing-docs.js process-commit "$COMMIT_HASH" "$COMMIT_MESSAGE"

  if ! git diff --quiet --exit-code src/components/*/TESTING.md 2>/dev/null; then
    echo "📋 Testing docs updated"
    TESTING_DOCS_UPDATED=true
  fi
fi

# Note: Automatic Storybook documentation generation has been disabled
echo "📝 Storybook documentation generation is disabled"

# Commit any documentation updates
if [ "$CHANGELOG_UPDATED" = true ] || [ "$README_UPDATED" = true ] || [ "$TESTING_DOCS_UPDATED" = true ]; then
  echo "📝 Staging documentation changes..."

  # Stage any updated documentation files
  if [ "$CHANGELOG_UPDATED" = true ]; then
    git add src/components/*/CHANGELOG.md
  fi

  if [ "$README_UPDATED" = true ]; then
    git add src/components/*/README.md
  fi

  if [ "$TESTING_DOCS_UPDATED" = true ]; then
    git add src/components/*/TESTING.md
  fi

  # Create commit message based on what was updated
  if [ "$CHANGELOG_UPDATED" = true ] && [ "$README_UPDATED" = true ] && [ "$TESTING_DOCS_UPDATED" = true ]; then
    COMMIT_MSG="docs: update component documentation"
    DETAILS="Automatically updated changelogs, READMEs, and testing docs for changes in commit: $COMMIT_HASH"
  elif [ "$CHANGELOG_UPDATED" = true ] && [ "$README_UPDATED" = true ]; then
    COMMIT_MSG="docs: update component changelogs and READMEs"
    DETAILS="Automatically updated changelogs and READMEs for components affected by commit: $COMMIT_HASH"
  elif [ "$CHANGELOG_UPDATED" = true ] && [ "$TESTING_DOCS_UPDATED" = true ]; then
    COMMIT_MSG="docs: update component changelogs and testing documentation"
    DETAILS="Automatically updated changelogs and testing docs for changes in commit: $COMMIT_HASH"
  elif [ "$README_UPDATED" = true ] && [ "$TESTING_DOCS_UPDATED" = true ]; then
    COMMIT_MSG="docs: update component READMEs and testing documentation"
    DETAILS="Automatically updated READMEs and testing docs for changes in commit: $COMMIT_HASH"
  elif [ "$CHANGELOG_UPDATED" = true ]; then
    COMMIT_MSG="docs: update component changelogs"
    DETAILS="Automatically updated changelogs for components affected by commit: $COMMIT_HASH"
  elif [ "$README_UPDATED" = true ]; then
    COMMIT_MSG="docs: update component READMEs"
    DETAILS="Automatically updated READMEs for components affected by commit: $COMMIT_HASH"
  elif [ "$TESTING_DOCS_UPDATED" = true ]; then
    COMMIT_MSG="docs: update component testing documentation"
    DETAILS="Automatically updated testing docs for test file changes in commit: $COMMIT_HASH"
  fi
  
  # Create a follow-up commit for documentation updates (avoid infinite loop with --no-verify)
  git commit --no-verify -m "$COMMIT_MSG

$DETAILS

🤖 Generated by post-commit hook"
  
  echo "✅ Component documentation updated and committed"
else
  echo "✅ No documentation updates needed"
fi

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# Automated Documentation Cleanup
# Runs cleanup if many docs are ready for archive (configurable threshold)
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# Skip if disabled via environment variable
if [ "$SKIP_DOC_CLEANUP" = "1" ]; then
  echo "🔄 Post-commit: Documentation cleanup skipped (SKIP_DOC_CLEANUP=1)"
else
  # Skip if this is already a doc cleanup commit
  if echo "$COMMIT_MESSAGE" | grep -q "^chore: archive obsolete documentation"; then
    echo "🔄 Post-commit: Skipping doc cleanup-only commit"
  else
    # Check how many docs are ready for archive
    ARCHIVABLE_COUNT=$(node scripts/maintenance/cleanup-documentation.cjs --dry-run 2>/dev/null | grep "📦 Archivable:" | awk '{print $3}')

    if [ -n "$ARCHIVABLE_COUNT" ] && [ "$ARCHIVABLE_COUNT" -gt 5 ]; then
      echo ""
      echo "🧹 Post-commit: Found $ARCHIVABLE_COUNT docs ready for archive"
      echo "   Running automated cleanup..."

      # Run cleanup
      node scripts/maintenance/cleanup-documentation.cjs

      # Check if any files were actually moved
      if ! git diff --quiet --exit-code docs/ 2>/dev/null; then
        echo "📦 Staging archived documentation..."
        git add docs/

        # Create automatic cleanup commit
        git commit --no-verify -m "chore: archive obsolete documentation

Automatically archived $ARCHIVABLE_COUNT obsolete doc(s) via post-commit hook.
Threshold: 5 docs ready for archive.

To disable: SKIP_DOC_CLEANUP=1 git commit

🤖 Generated by post-commit hook"

        echo "✅ Documentation cleanup completed and committed"
      else
        echo "✅ No documentation changes after cleanup"
      fi
    elif [ -n "$ARCHIVABLE_COUNT" ] && [ "$ARCHIVABLE_COUNT" -gt 0 ]; then
      echo "🔄 Post-commit: Found $ARCHIVABLE_COUNT doc(s) ready for archive (threshold: 5)"
      echo "   Run manually: npm run docs:cleanup"
    fi
  fi
fi

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# Discovered Issues Policy Enforcement
# See: CLAUDE.md - Discovered Issues Policy
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# Check if the last commit message mentions --no-verify
if echo "$COMMIT_MESSAGE" | grep -q -i "no-verify"; then
  echo ""
  echo "🚨 Detected --no-verify commit"
  echo "📋 Generating discovered issues tracker..."
  echo ""

  # Run the discovered issues generator
  node scripts/validate/generate-discovered-issues.cjs

  echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
  echo ""
  echo "⚠️  IMPORTANT: Fix discovered issues before starting new work"
  echo ""
  echo "📖 See: CLAUDE.md - Discovered Issues Policy"
  echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
  echo ""
fi

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# AI Code Quality Validation (Post-Commit - Non-Blocking)
# Moved from pre-commit to prevent false positives from blocking commits
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

echo ""
echo "🤖 Running AI code quality validation (informational)..."
echo ""

# Run AI quality validation
if node scripts/validate/ai-code-quality-validator.cjs 2>&1 | tee /tmp/ai-quality-report.txt; then
  echo ""
  echo "✅ No AI code quality issues detected"
else
  echo ""
  echo "⚠️  AI Code Quality Issues Found (non-blocking)"
  echo ""
  cat /tmp/ai-quality-report.txt
  echo ""
  echo "💡 These issues don't block your commit but should be addressed:"
  echo "   • Remove console.log statements"
  echo "   • Clean up debugging code"
  echo "   • Add cleanup to event listeners/timers"
  echo "   • Use specific error messages"
  echo ""
  echo "📖 See: docs/AI_CODE_QUALITY_GUIDE.md"
  echo ""
fi

rm -f /tmp/ai-quality-report.txt