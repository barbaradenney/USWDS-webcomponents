import { html, css } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { USWDSBaseComponent } from '../../utils/base-component.js';

// Import official USWDS compiled CSS
import '../../styles/styles.css';

/**
 * ARCHITECTURE: Option B (Pure Global Init)
 * - USWDS is initialized globally via .on(document) in .storybook/preview-head.html
 * - This component ONLY renders HTML structure
 * - All behavior managed by USWDS event delegation
 * - Component properties synced to USWDS-created elements
 *
 * USA Search Web Component
 *
 * A minimal wrapper around USWDS search functionality.
 * Provides the HTML structure for USWDS search with optional toggle behavior.
 *
 * @element usa-search
 * @fires search-submit - Dispatched when search form is submitted
 *
 * @see README.mdx - Complete API documentation, usage examples, and implementation notes
 * @see CHANGELOG.mdx - Component version history and breaking changes
 * @see TESTING.mdx - Testing documentation and coverage reports
 *
 * @uswds-js-reference https://github.com/uswds/uswds/tree/develop/packages/usa-search/src/index.js
 * @uswds-css-reference https://github.com/uswds/uswds/tree/develop/packages/usa-search/src/styles/_usa-search.scss
 * @uswds-docs https://designsystem.digital.gov/components/search/
 * @uswds-guidance https://designsystem.digital.gov/components/search/#guidance
 * @uswds-accessibility https://designsystem.digital.gov/components/search/#accessibility
 */
@customElement('usa-search')
export class USASearch extends USWDSBaseComponent {
  // CRITICAL: Light DOM implementation for USWDS compatibility
  protected override createRenderRoot() {
    return this;
  }

  static override styles = css`
    :host {
      display: block;
    }
  `;

  @property({ type: String })
  placeholder = 'Search';

  @property({ type: String })
  label = '';

  @property({ type: String })
  buttonText = 'Search';

  @property({ type: String })
  value = '';

  @property({ type: String })
  size: 'small' | 'medium' | 'big' = 'medium';

  @property({ type: Boolean })
  disabled = false;

  @property({ type: String })
  name = 'search';

  @property({ type: String })
  inputId = 'search-field';

  @property({ type: String, attribute: 'button-id' })
  buttonId = 'search-button';

  // Store USWDS module for cleanup
  private uswdsModule: any = null;
  private uswdsInitialized = false;

  override connectedCallback() {
    super.connectedCallback();

    // Set web component managed flag to prevent USWDS auto-initialization conflicts
    this.setAttribute('data-web-component-managed', 'true');

    // Global USWDS initialization handles all behavior via event delegation
  }

  override firstUpdated(changedProperties: Map<string, any>) {
    super.firstUpdated(changedProperties);
    // Global USWDS initialization handles all behavior via event delegation
  }

  override disconnectedCallback() {
    super.disconnectedCallback();
    this.cleanupUSWDS();
  }

  private setupFormListener() {
    // Only listen for form submission to dispatch custom event for web component consumers
    // Let native HTML form behavior handle the actual submission
    const form = this.querySelector('form');
    if (form) {
      form.addEventListener('submit', (e) => {
        const input = form.querySelector('.usa-search__input') as HTMLInputElement;

        // Always prevent default form submission - we handle it via custom events
        e.preventDefault();

        // Don't dispatch events if disabled
        if (this.disabled) {
          return;
        }

        // Dispatch custom event for web component consumers
        this.dispatchEvent(
          new CustomEvent('search-submit', {
            detail: {
              query: input?.value || '',
              form: form,
            },
            bubbles: true,
            composed: true,
          })
        );
      });

      // Add keydown listener for Enter key handling
      const input = form.querySelector('.usa-search__input') as HTMLInputElement;
      if (input) {
        input.addEventListener('keydown', (e) => {
          if (e.key === 'Enter' && !this.disabled) {
            // Dispatch the same search-submit event
            this.dispatchEvent(
              new CustomEvent('search-submit', {
                detail: {
                  query: input.value || '',
                  form: form,
                },
                bubbles: true,
                composed: true,
              })
            );
          }
        });
      }
    }
  }

  private handleInputChange(e: Event) {
    const input = e.target as HTMLInputElement;
    this.value = input.value;

    // Dispatch search-input event
    this.dispatchEvent(
      new CustomEvent('search-input', {
        detail: {
          query: input.value,
          input: input,
        },
        bubbles: true,
        composed: true,
      })
    );
  }

  

  /**
   * Clean up USWDS module on component destruction
   */
  private async cleanupUSWDS() {
    try {
      const { cleanupUSWDSComponent } = await import('../../utils/uswds-loader.js');
      cleanupUSWDSComponent(this, this.uswdsModule);
    } catch (error) {
      console.warn('⚠️ Search: Error importing cleanup utility:', error);
    }

    this.uswdsModule = null;
    this.uswdsInitialized = false;
  }

  override render() {
    const sizeClass = this.size ? `usa-search--${this.size}` : '';
    const labelText = this.label || this.placeholder || 'Search';

    return html`
      <form
        role="search"
        class="usa-search ${sizeClass}"
      >
        <label class="usa-sr-only" for="${this.inputId}">${labelText}</label>
        <div role="search">
          <input
            id="${this.inputId}"
            class="usa-input usa-search__input"
            type="search"
            name="${this.name}"
            placeholder="${this.placeholder}"
            .value="${this.value}"
            ?disabled="${this.disabled}"
            aria-label="${labelText}"
            @input="${this.handleInputChange}"
          />
          <button
            id="${this.buttonId}"
            class="usa-button usa-search__submit"
            type="submit"
            ?disabled="${this.disabled}"
          >
            ${this.size !== 'small' ? html`<span class="usa-search__submit-text">${this.buttonText}</span>` : ''}
            <img
              src="/assets/img/search.svg"
              class="usa-search__submit-icon"
              alt=""
            />
          </button>
        </div>
      </form>
    `;
  }
}