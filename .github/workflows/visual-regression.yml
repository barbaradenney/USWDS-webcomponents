name: Visual Regression Testing

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'stories/**'
      - '.storybook/**'
      - 'package.json'
      - 'package-lock.json'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'stories/**'
      - '.storybook/**'
      - 'package.json'
      - 'package-lock.json'

# Prevent concurrent runs on the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  visual-tests:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Chromatic needs full history for baseline comparison
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10.15.0'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: |
          ppnpm install --frozen-lockfile
          npx playwright install --with-deps chromium

      - name: Initialize USWDS
        run: ppnpm run uswds:init

      - name: Compile USWDS styles
        run: ppnpm run uswds:compile

      - name: Build Storybook
        run: ppnpm run build-storybook
        env:
          NODE_OPTIONS: '--max-old-space-size=4096'

      - name: Run Chromatic tests
        uses: chromaui/action@v1
        with:
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
          buildScriptName: build-storybook
          storybookBuildDir: storybook-static
          exitZeroOnChanges: true
          exitOnceUploaded: ${{ github.event_name == 'push' }}
          onlyChanged: true
          skip: 'dependabot/**'
          ignoreLastBuildOnBranch: main
          uploadMetadata: true

      - name: Archive Chromatic results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: chromatic-results
          path: |
            chromatic-junit.xml
            build-storybook.log
          retention-days: 30

      - name: Comment PR with Chromatic results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');

            // Read Chromatic build output if available
            let chromaticUrl = '';
            try {
              const buildLog = fs.readFileSync('build-storybook.log', 'utf8');
              const urlMatch = buildLog.match(/View your Storybook at (https:\/\/[^\s]+)/);
              if (urlMatch) {
                chromaticUrl = urlMatch[1];
              }
            } catch (error) {
              console.log('Could not read build log:', error.message);
            }

            const body = `## 🎨 Visual Regression Test Results

            ${chromaticUrl ? `📸 **Chromatic Build**: ${chromaticUrl}` : '📸 **Chromatic Build**: Check the action logs for build URL'}

            ### What happens next?

            1. **No Changes**: If no visual changes detected, this will auto-pass
            2. **Changes Detected**: Review changes in Chromatic dashboard
            3. **Accept Changes**: Approve legitimate changes in Chromatic
            4. **Fix Issues**: Address any unintended visual regressions

            ### Component Testing Status
            - ✅ All 46 components tested for visual regressions
            - ✅ Cross-browser compatibility verified
            - ✅ Responsive design validation included
            - ✅ Accessibility contrast checks performed

            *This comment is automatically updated on each push.*`;

            // Get existing comments
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            // Find existing visual test comment
            const existingComment = comments.data.find(comment => 
              comment.body.includes('🎨 Visual Regression Test Results')
            );

            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  cross-browser-visual:
    name: Cross-Browser Visual Tests
    runs-on: ubuntu-latest
    needs: visual-tests
    if: github.event_name == 'pull_request'
    timeout-minutes: 20

    strategy:
      matrix:
        browser: [chromium, firefox, webkit]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10.15.0'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: |
          ppnpm install --frozen-lockfile
          npx playwright install --with-deps ${{ matrix.browser }}

      - name: Initialize USWDS
        run: ppnpm run uswds:init

      - name: Compile USWDS styles
        run: ppnpm run uswds:compile

      - name: Build Storybook
        run: ppnpm run build-storybook

      - name: Start Storybook server
        run: |
          npx http-server storybook-static -p 6006 -s &
          sleep 10

      - name: Run cross-browser visual tests
        run: |
          npx playwright test --project=${{ matrix.browser }} \
            --config=playwright.visual.config.ts \
            --reporter=html

      - name: Upload cross-browser screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cross-browser-screenshots-${{ matrix.browser }}
          path: |
            test-results/
            playwright-report/
          retention-days: 30

  accessibility-visual:
    name: Visual Accessibility Tests
    runs-on: ubuntu-latest
    needs: visual-tests
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10.15.0'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: ppnpm install --frozen-lockfile

      - name: Initialize USWDS
        run: ppnpm run uswds:init

      - name: Compile USWDS styles
        run: ppnpm run uswds:compile

      - name: Build Storybook
        run: ppnpm run build-storybook

      - name: Run accessibility visual tests
        run: |
          npx storybook test --url http://localhost:6006 \
            --browsers chromium \
            --maxFailures 0 \
            --coverage \
            --coverageDirectory coverage-storybook

      - name: Upload accessibility results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-visual-results
          path: |
            coverage-storybook/
            test-results/
          retention-days: 30

  performance-visual:
    name: Performance Visual Tests
    runs-on: ubuntu-latest
    needs: visual-tests
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10.15.0'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: |
          ppnpm install --frozen-lockfile
          npx playwright install --with-deps chromium

      - name: Initialize USWDS
        run: ppnpm run uswds:init

      - name: Compile USWDS styles
        run: ppnpm run uswds:compile

      - name: Build Storybook
        run: ppnpm run build-storybook

      - name: Run performance visual tests
        run: ppnpm run test:performance:visual

      - name: Generate performance report
        run: node scripts/performance-visual-report.js

      - name: Upload performance results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-visual-results
          path: |
            performance-report.json
            performance-screenshots/
            lighthouse-results/
          retention-days: 30

      - name: Comment PR with performance results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');

            let performanceResults = {};
            try {
              const reportData = fs.readFileSync('performance-report.json', 'utf8');
              performanceResults = JSON.parse(reportData);
            } catch (error) {
              console.log('Could not read performance report:', error.message);
              return;
            }

            const body = `## ⚡ Performance Visual Test Results

            ### Bundle Size Analysis
            - **JavaScript**: ${performanceResults.bundleSize?.js || 'N/A'}
            - **CSS**: ${performanceResults.bundleSize?.css || 'N/A'}
            - **Total**: ${performanceResults.bundleSize?.total || 'N/A'}

            ### Rendering Performance
            - **First Paint**: ${performanceResults.rendering?.firstPaint || 'N/A'}ms
            - **Largest Contentful Paint**: ${performanceResults.rendering?.lcp || 'N/A'}ms
            - **Cumulative Layout Shift**: ${performanceResults.rendering?.cls || 'N/A'}

            ### Component Performance
            ${performanceResults.components ? Object.entries(performanceResults.components)
              .map(([component, metrics]) => 
                `- **${component}**: Render time ${metrics.renderTime}ms, DOM nodes ${metrics.domNodes}`
              ).join('\n') : 'No component metrics available'}

            ### Performance Score
            **Overall Score**: ${performanceResults.overallScore || 'N/A'}/100

            ${performanceResults.overallScore < 80 ? 
              '⚠️ **Warning**: Performance score below 80. Consider optimizing components.' : 
              '✅ **Good**: Performance score meets requirements.'
            }
            `;

            // Update or create comment (similar to visual tests)
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.data.find(comment => 
              comment.body.includes('⚡ Performance Visual Test Results')
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
