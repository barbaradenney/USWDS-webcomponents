name: Visual Regression Testing

on:
  push:
    branches: [main, develop]
    paths:
      - 'packages/*/src/**'
      - 'stories/**'
      - '.storybook/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'packages/*/src/**'
      - 'stories/**'
      - '.storybook/**'
      - 'package.json'
      - 'pnpm-lock.yaml'

# Prevent concurrent runs on the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  visual-tests:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Chromatic needs full history for baseline comparison
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10.15.0'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile
          npx playwright install --with-deps chromium

      # TODO: Temporarily disabled due to gulp/undici compatibility issue
      # - name: Initialize USWDS
      #   run: pnpm run uswds:init

      # - name: Compile USWDS styles
      #   run: pnpm run uswds:compile

      - name: Build Storybook
        run: pnpm run build-storybook
        env:
          NODE_OPTIONS: '--max-old-space-size=4096'

      # TODO: Chromatic integration disabled - requires CHROMATIC_PROJECT_TOKEN secret
      # Uncomment and configure secret to enable visual regression testing with Chromatic
      # - name: Run Chromatic tests
      #   uses: chromaui/action@v1
      #   with:
      #     projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
      #     buildScriptName: build-storybook
      #     storybookBuildDir: storybook-static
      #     exitZeroOnChanges: true
      #     exitOnceUploaded: ${{ github.event_name == 'push' }}
      #     onlyChanged: true
      #     skip: 'dependabot/**'
      #     ignoreLastBuildOnBranch: main
      #     uploadMetadata: true

      # TODO: Archive and comment steps disabled until Chromatic is configured
      # - name: Archive Chromatic results
      #   if: always()
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: chromatic-results
      #     path: |
      #       chromatic-junit.xml
      #       build-storybook.log
      #     retention-days: 30

  # TODO: Temporarily disabled - requires configuration and fixes for monorepo structure
  # Uncomment and fix when ready to implement:
  # - cross-browser-visual: Port conflicts with Playwright, needs playwright.config.ts update
  # - accessibility-visual: Requires test infrastructure setup
  # - performance-visual: Requires scripts/performance-visual-report.js and test scripts

  # cross-browser-visual:
  #   name: Cross-Browser Visual Tests
  #   runs-on: ubuntu-latest
  #   needs: visual-tests
  #   if: github.event_name == 'pull_request'
  #   timeout-minutes: 20
  #
  #   strategy:
  #     matrix:
  #       browser: [chromium, firefox, webkit]
  #
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Setup pnpm
  #       uses: pnpm/action-setup@v4
  #       with:
  #         version: '10.15.0'
  #
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '18'
  #         cache: 'pnpm'
  #
  #     - name: Install dependencies
  #       run: |
  #         pnpm install --frozen-lockfile
  #         npx playwright install --with-deps ${{ matrix.browser }}
  #
  #     - name: Build Storybook
  #       run: pnpm run build-storybook
  #
  #     - name: Start Storybook server
  #       run: |
  #         npx http-server storybook-static -p 6007 -s &
  #         sleep 10
  #
  #     - name: Run cross-browser visual tests
  #       run: |
  #         npx playwright test --project=${{ matrix.browser }} \
  #           --config=playwright.visual.config.ts \
  #           --reporter=html
  #
  #     - name: Upload cross-browser screenshots
  #       if: always()
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: cross-browser-screenshots-${{ matrix.browser }}
  #         path: |
  #           test-results/
  #           playwright-report/
  #         retention-days: 30
  #
  # accessibility-visual:
  #   name: Visual Accessibility Tests
  #   runs-on: ubuntu-latest
  #   needs: visual-tests
  #   timeout-minutes: 15
  #
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Setup pnpm
  #       uses: pnpm/action-setup@v4
  #       with:
  #         version: '10.15.0'
  #
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '18'
  #         cache: 'pnpm'
  #
  #     - name: Install dependencies
  #       run: pnpm install --frozen-lockfile
  #
  #     - name: Build Storybook
  #       run: pnpm run build-storybook
  #
  #     - name: Run accessibility visual tests
  #       run: |
  #         npx storybook test --url http://localhost:6006 \
  #           --browsers chromium \
  #           --maxFailures 0 \
  #           --coverage \
  #           --coverageDirectory coverage-storybook
  #
  #     - name: Upload accessibility results
  #       if: always()
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: accessibility-visual-results
  #         path: |
  #           coverage-storybook/
  #           test-results/
  #         retention-days: 30
  #
  # performance-visual:
  #   name: Performance Visual Tests
  #   runs-on: ubuntu-latest
  #   needs: visual-tests
  #   timeout-minutes: 15
  #
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Setup pnpm
  #       uses: pnpm/action-setup@v4
  #       with:
  #         version: '10.15.0'
  #
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '18'
  #         cache: 'pnpm'
  #
  #     - name: Install dependencies
  #       run: |
  #         pnpm install --frozen-lockfile
  #         npx playwright install --with-deps chromium
  #
  #     - name: Build Storybook
  #       run: pnpm run build-storybook
  #
  #     - name: Run performance visual tests
  #       run: pnpm run test:performance:visual
  #
  #     - name: Generate performance report
  #       run: node scripts/performance-visual-report.js
  #
  #     - name: Upload performance results
  #       if: always()
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: performance-visual-results
  #         path: |
  #           performance-report.json
  #           performance-screenshots/
  #           lighthouse-results/
  #         retention-days: 30
  #
  #     - name: Comment PR with performance results
  #       if: github.event_name == 'pull_request'
  #       uses: actions/github-script@v6
  #       with:
  #         script: |
  #           const fs = require('fs');
  #
  #           let performanceResults = {};
  #           try {
  #             const reportData = fs.readFileSync('performance-report.json', 'utf8');
  #             performanceResults = JSON.parse(reportData);
  #           } catch (error) {
  #             console.log('Could not read performance report:', error.message);
  #             return;
  #           }
  #
  #           const body = `## ⚡ Performance Visual Test Results
  #
  #           ### Bundle Size Analysis
  #           - **JavaScript**: ${performanceResults.bundleSize?.js || 'N/A'}
  #           - **CSS**: ${performanceResults.bundleSize?.css || 'N/A'}
  #           - **Total**: ${performanceResults.bundleSize?.total || 'N/A'}
  #
  #           ### Rendering Performance
  #           - **First Paint**: ${performanceResults.rendering?.firstPaint || 'N/A'}ms
  #           - **Largest Contentful Paint**: ${performanceResults.rendering?.lcp || 'N/A'}ms
  #           - **Cumulative Layout Shift**: ${performanceResults.rendering?.cls || 'N/A'}
  #
  #           ### Component Performance
  #           ${performanceResults.components ? Object.entries(performanceResults.components)
  #             .map(([component, metrics]) =>
  #               `- **${component}**: Render time ${metrics.renderTime}ms, DOM nodes ${metrics.domNodes}`
  #             ).join('\n') : 'No component metrics available'}
  #
  #           ### Performance Score
  #           **Overall Score**: ${performanceResults.overallScore || 'N/A'}/100
  #
  #           ${performanceResults.overallScore < 80 ?
  #             '⚠️ **Warning**: Performance score below 80. Consider optimizing components.' :
  #             '✅ **Good**: Performance score meets requirements.'
  #           }
  #           `;
  #
  #           // Update or create comment (similar to visual tests)
  #           const comments = await github.rest.issues.listComments({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             issue_number: context.issue.number,
  #           });
  #
  #           const existingComment = comments.data.find(comment =>
  #             comment.body.includes('⚡ Performance Visual Test Results')
  #           );
  #
  #           if (existingComment) {
  #             await github.rest.issues.updateComment({
  #               owner: context.repo.owner,
  #               repo: context.repo.repo,
  #               comment_id: existingComment.id,
  #               body: body
  #             });
  #           } else {
  #             await github.rest.issues.createComment({
  #               owner: context.repo.owner,
  #               repo: context.repo.repo,
  #               issue_number: context.issue.number,
  #               body: body
  #             });
  #           }
