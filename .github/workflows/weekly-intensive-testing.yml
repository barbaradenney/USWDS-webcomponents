name: 🔬 Weekly Intensive Testing

on:
  schedule:
    # Run every Sunday at 3 AM UTC (intensive tests during low-traffic time)
    - cron: '0 3 * * 0'
  workflow_dispatch:
    inputs:
      run_flaky:
        description: 'Run flaky test detection'
        required: false
        default: 'true'
        type: boolean
      run_mutation:
        description: 'Run mutation testing'
        required: false
        default: 'true'
        type: boolean
      run_contracts:
        description: 'Run contract testing'
        required: false
        default: 'true'
        type: boolean
      run_performance:
        description: 'Run performance regression'
        required: false
        default: 'true'
        type: boolean
      flaky_runs:
        description: 'Number of runs for flaky detection'
        required: false
        default: '10'
        type: string

env:
  NODE_VERSION: '20'
  FORCE_COLOR: 1

jobs:
  # Job 1: Flaky Test Detection
  flaky-detection:
    name: 🔍 Flaky Test Detection
    runs-on: ubuntu-latest
    if: github.event.inputs.run_flaky != 'false'
    timeout-minutes: 60
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10.15.0'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run flaky test detection
        run: |
          RUNS=${{ github.event.inputs.flaky_runs || '10' }}
          pnpm run test:flaky-detection -- --runs=$RUNS --verbose
        continue-on-error: true

      - name: Upload flaky test report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: flaky-test-report
          path: test-reports/flaky-tests.json
          retention-days: 30

      - name: Create issue if flaky tests found
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('test-reports/flaky-tests.json')) {
              const report = JSON.parse(fs.readFileSync('test-reports/flaky-tests.json', 'utf8'));

              if (report.flakyTests > 0) {
                const body = `## 🔍 Flaky Tests Detected

**Summary:**
- Total test runs: ${report.runs}
- Flaky tests found: ${report.flakyTests}
- Date: ${report.timestamp}

**Flaky Tests:**

${report.tests.map((test, i) => `${i + 1}. **${test.name}**
   - File: \`${test.file}\`
   - Pass Rate: ${test.passRate}% (${test.passCount}/${report.runs})
   - Pattern: ${test.runs.map(r => r.passed ? '✓' : '✗').join('')}
`).join('\n')}

**Recommendations:**
1. Review test patterns for timing issues
2. Check for race conditions
3. Add proper waits/assertions
4. Consider quarantining until fixed

📄 Full report available in workflow artifacts.`;

                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: `🔍 Flaky Tests Detected - ${report.flakyTests} test(s) unstable`,
                  body: body,
                  labels: ['testing', 'flaky-test', 'needs-investigation']
                });
              }
            }

  # Job 2: Mutation Testing
  mutation-testing:
    name: 🧬 Mutation Testing
    runs-on: ubuntu-latest
    if: github.event.inputs.run_mutation != 'false'
    timeout-minutes: 120
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10.15.0'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Stryker mutation testing
        run: pnpm install --save-dev @stryker-mutator/core @stryker-mutator/vitest-runner

      - name: Run mutation testing
        run: pnpm run test:mutation
        continue-on-error: true

      - name: Upload mutation report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mutation-test-report
          path: |
            reports/mutation/
            reports/mutation/index.html
          retention-days: 30

      - name: Check mutation score
        id: mutation-score
        run: |
          if [ -f reports/mutation/mutation-report.json ]; then
            SCORE=$(cat reports/mutation/mutation-report.json | jq -r '.mutationScore // 0')
            echo "score=$SCORE" >> $GITHUB_OUTPUT
            echo "Mutation score: $SCORE%"
          fi

      - name: Create issue if mutation score low
        if: steps.mutation-score.outputs.score != '' && steps.mutation-score.outputs.score < '80'
        uses: actions/github-script@v7
        with:
          script: |
            const score = '${{ steps.mutation-score.outputs.score }}';

            const body = `## 🧬 Low Mutation Testing Score

**Current Mutation Score: ${score}%**
**Target: 80%+**

The mutation testing score is below the recommended threshold. This indicates that your tests may not be catching all potential bugs.

**What This Means:**
- ${score}% of code mutations were detected by tests
- ${100 - score}% of mutations survived (bugs that tests didn't catch)

**Recommendations:**
1. Review survived mutants in the HTML report
2. Add missing test cases
3. Improve assertion specificity
4. Test edge cases more thoroughly

📄 View detailed report in workflow artifacts.`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🧬 Low Mutation Score (${score}%) - Test Quality Needs Improvement`,
              body: body,
              labels: ['testing', 'mutation-testing', 'needs-improvement']
            });

  # Job 3: Contract Testing
  contract-testing:
    name: 📜 Contract Testing
    runs-on: ubuntu-latest
    if: github.event.inputs.run_contracts != 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10.15.0'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check for baseline contracts
        id: check-baseline
        run: |
          if [ -f test-contracts/component-contracts.json ]; then
            echo "baseline_exists=true" >> $GITHUB_OUTPUT
          else
            echo "baseline_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate baseline if missing
        if: steps.check-baseline.outputs.baseline_exists == 'false'
        run: pnpm run test:contracts:generate

      - name: Validate contracts
        if: steps.check-baseline.outputs.baseline_exists == 'true'
        run: pnpm run test:contracts:validate
        continue-on-error: true

      - name: Upload contract reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: contract-test-report
          path: test-contracts/
          retention-days: 30

      - name: Create PR if baseline missing
        if: steps.check-baseline.outputs.baseline_exists == 'false'
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: 'test: add component contract baseline'
          title: '📜 Add Component Contract Baseline'
          body: |
            ## Component Contract Baseline

            This PR adds the baseline component contracts for API stability validation.

            **What's Included:**
            - Component property definitions
            - Event signatures
            - Public method signatures
            - ARIA attributes
            - CSS class usage

            **Next Steps:**
            1. Review the generated contracts
            2. Merge to establish baseline
            3. Future changes will be validated against this baseline

            🤖 Auto-generated by weekly intensive testing
          branch: contracts/add-baseline
          labels: testing,contracts,auto-generated

  # Job 4: Performance Regression Tracking
  performance-regression:
    name: ⚡ Performance Regression
    runs-on: ubuntu-latest
    if: github.event.inputs.run_performance != 'false'
    timeout-minutes: 45
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10.15.0'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Start Storybook
        run: pnpm run storybook &
        env:
          CI: true

      - name: Wait for Storybook
        run: npx wait-on http://localhost:6006 --timeout 120000

      - name: Check for baseline
        id: check-baseline
        run: |
          if [ -f performance-reports/baseline.json ]; then
            echo "baseline_exists=true" >> $GITHUB_OUTPUT
          else
            echo "baseline_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create baseline if missing
        if: steps.check-baseline.outputs.baseline_exists == 'false'
        run: pnpm run test:performance:baseline

      - name: Compare performance
        if: steps.check-baseline.outputs.baseline_exists == 'true'
        run: pnpm run test:performance:compare
        continue-on-error: true

      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-reports
          path: performance-reports/
          retention-days: 30

      - name: Create issue if regressions found
        if: failure() && steps.check-baseline.outputs.baseline_exists == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('performance-reports/current.json')) {
              const body = `## ⚡ Performance Regression Detected

Performance has degraded compared to the baseline.

**Metrics:**
- Bundle size, build time, or render performance exceeded thresholds
- Review detailed report in workflow artifacts

**Recommendations:**
1. Identify which metric regressed
2. Review recent changes
3. Profile the specific component
4. Optimize or update baseline if acceptable

📄 Full performance report available in workflow artifacts.`;

              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '⚡ Performance Regression Detected',
                body: body,
                labels: ['performance', 'regression', 'needs-investigation']
              });
            }

  # Summary Job
  summary:
    name: 📊 Weekly Testing Summary
    runs-on: ubuntu-latest
    needs: [flaky-detection, mutation-testing, contract-testing, performance-regression]
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "# 🔬 Weekly Intensive Testing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔍 Flaky Detection | ${{ needs.flaky-detection.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🧬 Mutation Testing | ${{ needs.mutation-testing.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 📜 Contract Testing | ${{ needs.contract-testing.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ⚡ Performance Regression | ${{ needs.performance-regression.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📅 Scheduled run: Every Sunday at 3 AM UTC" >> $GITHUB_STEP_SUMMARY
          echo "🔄 Next run: $(date -u -d 'next sunday 03:00' '+%Y-%m-%d %H:%M UTC' 2>/dev/null || echo 'Check GitHub Actions schedule')" >> $GITHUB_STEP_SUMMARY
