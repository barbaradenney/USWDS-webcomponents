name: Component Interaction Testing

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/components/**'
      - 'scripts/**'
      - '.storybook/**'
      - 'vite.config.ts'
      - 'package.json'
  push:
    branches: [ main ]
    paths:
      - 'src/components/**'
      - 'scripts/**'
      - '.storybook/**'
      - 'vite.config.ts'

jobs:
  interaction-validation:
    name: Validate Component Interactions
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10.15.0'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: ppnpm install --frozen-lockfile

      - name: Build components
        run: ppnpm run build:css

      - name: Analyze component integration status
        run: ppnpm run analyze:component-integration

      - name: Validate component interactions
        run: ppnpm run validate:component-interactions

      - name: Run interaction unit tests
        run: ppnpm run test:accordion:interaction

      - name: Upload interaction analysis report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: component-integration-analysis
          path: component-integration-analysis.json

  storybook-interaction-testing:
    name: Storybook Interaction Testing
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10.15.0'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: ppnpm install --frozen-lockfile

      - name: Build CSS
        run: ppnpm run build:css

      - name: Start dev server in background
        run: |
          ppnpm run dev &
          echo "DEV_PID=$!" >> $GITHUB_ENV

      - name: Wait for dev server
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:5173; do sleep 2; done'

      - name: Build and start Storybook
        run: |
          ppnpm run build-storybook
          npx http-server storybook-static -p 6007 &
          echo "STORYBOOK_PID=$!" >> $GITHUB_ENV

      - name: Wait for Storybook
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:6007; do sleep 2; done'

      - name: Run interaction tests in browser environments
        run: ppnpm run test:interactions:verbose

      - name: Upload interaction test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: interaction-test-results
          path: interaction-test-results.json

      - name: Cleanup background processes
        if: always()
        run: |
          kill $DEV_PID || true
          kill $STORYBOOK_PID || true

  # Update documentation and changelogs after interaction testing changes
  update-docs:
    name: Update Documentation and Changelogs
    runs-on: ubuntu-latest
    needs: [interaction-validation, storybook-interaction-testing]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10.15.0'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: ppnpm install --frozen-lockfile

      - name: Update documentation with latest component status
        run: ppnpm run docs:auto-update

      - name: Update changelogs for interaction testing changes
        run: ppnpm run changelog:update

      - name: Commit documentation updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          if [ -n "$(git status --porcelain)" ]; then
            git add docs/ CLAUDE.md
            git commit -m "docs: auto-update interaction testing documentation

            🤖 Generated with [Claude Code](https://claude.ai/code)

            Co-Authored-By: Claude <noreply@anthropic.com>"
            git push
          else
            echo "No documentation changes to commit"
          fi

  component-migration-validation:
    name: Validate Component Migration Patterns
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.title, 'component') || contains(github.event.pull_request.title, 'USWDS') || contains(github.event.pull_request.title, 'migration')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10.15.0'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: ppnpm install --frozen-lockfile

      - name: Check for accordion-like patterns in changes
        run: |
          # Get list of changed component files
          CHANGED_COMPONENTS=$(git diff --name-only origin/main...HEAD | grep 'src/components/.*/usa-.*\.ts$' | xargs -I {} basename {} .ts | sed 's/usa-//' || true)

          if [ ! -z "$CHANGED_COMPONENTS" ]; then
            echo "Changed components detected: $CHANGED_COMPONENTS"

            # Run migration analysis on changed components
            for component in $CHANGED_COMPONENTS; do
              echo "Testing migration pattern for: $component"
              ppnpm run migrate:component -- --component=$component --dry-run || echo "Migration analysis completed for $component"
            done
          else
            echo "No component changes detected"
          fi

      - name: Validate USWDS integration consistency
        run: |
          # Check that USWDS configuration is consistent
          ppnpm run validate:storybook-uswds

          # Run quick interaction validation
          ppnpm run validate:component-interactions

  # Security check for new interaction patterns
  security-validation:
    name: Security Validation for Interaction Changes
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.changed_files, 'src/components') || contains(github.event.pull_request.changed_files, 'scripts/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for potentially unsafe patterns
        run: |
          echo "🔍 Checking for potentially unsafe interaction patterns..."

          # Check for eval() or similar unsafe patterns
          if grep -r "eval(" src/components/ || grep -r "Function(" src/components/ || grep -r "innerHTML.*=" src/components/; then
            echo "❌ Potentially unsafe patterns detected in component changes"
            exit 1
          fi

          # Check for direct DOM manipulation that bypasses USWDS
          if grep -r "document\.createElement" src/components/ || grep -r "\.appendChild" src/components/; then
            echo "⚠️ Direct DOM manipulation detected - ensure USWDS compatibility"
          fi

          echo "✅ No unsafe patterns detected"

  comment-on-pr:
    name: Comment Analysis Results on PR
    runs-on: ubuntu-latest
    needs: [interaction-validation, storybook-interaction-testing]
    if: github.event_name == 'pull_request'

    steps:
      - name: Download analysis artifacts
        uses: actions/download-artifact@v4
        with:
          name: component-integration-analysis

      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: interaction-test-results

      - name: Generate PR comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Read analysis results
            let analysisComment = '## 🎯 Component Interaction Analysis\\n\\n';

            try {
              const analysis = JSON.parse(fs.readFileSync('component-integration-analysis.json', 'utf8'));

              analysisComment += \`### 📊 Summary\\n\`;
              analysisComment += \`- **Total Components**: \${analysis.summary.totalComponents}\\n\`;
              analysisComment += \`- **Interactive Components**: \${analysis.summary.interactiveComponents}\\n\`;
              analysisComment += \`- **Components Needing Migration**: \${analysis.summary.componentsNeedingMigration}\\n\`;
              analysisComment += \`- **Potential Conflicts**: \${analysis.summary.potentialConflicts}\\n\\n\`;

              if (analysis.recommendations && analysis.recommendations.length > 0) {
                analysisComment += \`### 🎯 Recommendations\\n\`;
                analysis.recommendations.forEach((rec, index) => {
                  analysisComment += \`\${index + 1}. **[\${rec.priority}]** \${rec.title}\\n\`;
                  analysisComment += \`   - \${rec.description}\\n\`;
                  analysisComment += \`   - Components: \${rec.components.join(', ')}\\n\\n\`;
                });
              }
            } catch (error) {
              analysisComment += 'Analysis data not available\\n\\n';
            }

            // Read test results
            try {
              const testResults = JSON.parse(fs.readFileSync('interaction-test-results.json', 'utf8'));

              analysisComment += \`### 🧪 Interaction Test Results\\n\`;
              analysisComment += \`- **Passed**: \${testResults.summary.passed}\\n\`;
              analysisComment += \`- **Failed**: \${testResults.summary.failed}\\n\`;
              analysisComment += \`- **Total**: \${testResults.summary.total}\\n\\n\`;

              if (testResults.summary.failed > 0) {
                analysisComment += \`### ❌ Failed Tests\\n\`;
                testResults.results.filter(r => !r.success).forEach(result => {
                  analysisComment += \`- **\${result.component}/\${result.environment}/\${result.testName}**: \${result.details}\\n\`;
                });
                analysisComment += \`\\n\`;
              }
            } catch (error) {
              analysisComment += 'Test results not available\\n\\n';
            }

            analysisComment += \`### 🔗 Useful Commands\\n\`;
            analysisComment += \`- \\\`ppnpm run analyze:component-integration\\\` - Full analysis\\n\`;
            analysisComment += \`- \\\`ppnpm run test:interactions\\\` - Test interactions\\n\`;
            analysisComment += \`- \\\`ppnpm run migrate:component -- --component=COMPONENT_NAME\\\` - Fix patterns\\n\`;

            // Post comment
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: analysisComment
            });
