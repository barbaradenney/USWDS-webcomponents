name: Performance Regression Detection

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  performance-benchmark:
    name: Performance Benchmarking
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for baseline comparison

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10.15.0'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: |
          # Retry Playwright installation up to 3 times (fixes timeout issues in CI)
          for i in 1 2 3; do
            if npx playwright install chromium --with-deps; then
              echo "✅ Playwright installed successfully"
              break
            else
              if [ $i -lt 3 ]; then
                echo "⏳ Playwright install attempt $i failed, retrying..."
                sleep 10
              else
                echo "❌ Playwright install failed after 3 attempts"
                exit 1
              fi
            fi
          done

      - name: Build project
        run: pnpm run build

      - name: Run performance tests
        run: |
          # Create performance test script
          cat > performance-test.js << 'EOF'
          const { chromium } = require('playwright');
          const fs = require('fs');

          async function runPerformanceTests() {
            const browser = await chromium.launch();
            const page = await browser.newPage();
            
            // Enable performance metrics
            await page.addInitScript(() => {
              window.performance.mark('start');
            });

            const results = {};
            
            // Test 1: Bundle load time
            console.log('Testing bundle load time...');
            await page.goto('http://localhost:3000');
            const loadTime = await page.evaluate(() => {
              window.performance.mark('loaded');
              return window.performance.measure('load-time', 'start', 'loaded').duration;
            });
            results.bundleLoadTime = loadTime;

            // Test 2: Component render performance
            console.log('Testing component render performance...');
            const renderTimes = {};
            
            // Test accordion rendering
            const accordionStart = Date.now();
            await page.setContent(`
              <usa-accordion>
                <usa-accordion-item title="Test" expanded>Content</usa-accordion-item>
              </usa-accordion>
            `);
            await page.waitForLoadState('networkidle');
            renderTimes.accordion = Date.now() - accordionStart;

            // Test button rendering (batch)
            const buttonStart = Date.now();
            await page.setContent(`
              <div>
                ${Array.from({length: 100}, (_, i) => `<usa-button>Button ${i}</usa-button>`).join('')}
              </div>
            `);
            await page.waitForLoadState('networkidle');
            renderTimes.buttonBatch = Date.now() - buttonStart;

            results.componentRenderTimes = renderTimes;

            // Test 3: Memory usage
            console.log('Testing memory usage...');
            const metrics = await page.metrics();
            results.memoryUsage = {
              jsHeapUsedSize: metrics.JSHeapUsedSize,
              jsHeapTotalSize: metrics.JSHeapTotalSize
            };

            // Test 4: Bundle size analysis (monorepo structure)
            console.log('Analyzing bundle sizes...');
            const bundleSizes = {};
            const packages = fs.readdirSync('packages');
            for (const pkg of packages) {
              const distPath = `packages/${pkg}/dist`;
              if (fs.existsSync(distPath)) {
                const files = fs.readdirSync(distPath);
                for (const file of files) {
                  if (file.endsWith('.js') || file.endsWith('.css')) {
                    const stats = fs.statSync(`${distPath}/${file}`);
                    bundleSizes[`${pkg}/${file}`] = stats.size;
                  }
                }
              }
            }
            results.bundleSizes = bundleSizes;

            await browser.close();
            
            // Save results
            fs.writeFileSync('performance-results.json', JSON.stringify(results, null, 2));
            
            return results;
          }

          runPerformanceTests().catch(console.error);
          EOF

          # TODO: Temporarily disabled - needs monorepo Storybook setup
          # In monorepo, there's no single dist/ folder to serve
          # Performance tests should use Storybook build instead

          # For now, just analyze bundle sizes without runtime testing
          echo "Skipping runtime performance tests - analyzing bundle sizes only"
          node -e "
          const fs = require('fs');
          const results = { bundleSizes: {} };
          const packages = fs.readdirSync('packages');
          for (const pkg of packages) {
            const distPath = \`packages/\${pkg}/dist\`;
            if (fs.existsSync(distPath)) {
              const files = fs.readdirSync(distPath);
              for (const file of files) {
                if (file.endsWith('.js') || file.endsWith('.css')) {
                  const stats = fs.statSync(\`\${distPath}/\${file}\`);
                  results.bundleSizes[\`\${pkg}/\${file}\`] = stats.size;
                }
              }
            }
          }
          fs.writeFileSync('performance-results.json', JSON.stringify(results, null, 2));
          console.log('Bundle sizes analyzed:', Object.keys(results.bundleSizes).length, 'files');
          "

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: performance-results.json

      - name: Download baseline performance data
        uses: actions/download-artifact@v4
        with:
          name: baseline-performance
          path: baseline/
        continue-on-error: true

      - name: Compare with baseline
        run: |
          node -e "
          const fs = require('fs');
          const current = JSON.parse(fs.readFileSync('performance-results.json', 'utf8'));

          let baseline = {};
          try {
            baseline = JSON.parse(fs.readFileSync('baseline/performance-results.json', 'utf8'));
          } catch (e) {
            console.log('No baseline found, setting current as baseline');
            process.exit(0);
          }

          console.log('## 🚀 Performance Comparison Report');
          console.log('');

          // Bundle load time comparison
          const loadTimeDiff = current.bundleLoadTime - baseline.bundleLoadTime;
          const loadTimePct = ((loadTimeDiff / baseline.bundleLoadTime) * 100).toFixed(1);
          console.log('### Bundle Load Time');
          console.log(\`- Current: \${current.bundleLoadTime.toFixed(1)}ms\`);
          console.log(\`- Baseline: \${baseline.bundleLoadTime.toFixed(1)}ms\`);
          console.log(\`- Change: \${loadTimeDiff > 0 ? '+' : ''}\${loadTimeDiff.toFixed(1)}ms (\${loadTimePct > 0 ? '+' : ''}\${loadTimePct}%)\`);

          // Component render times
          console.log('');
          console.log('### Component Render Times');
          for (const [component, time] of Object.entries(current.componentRenderTimes)) {
            const baseTime = baseline.componentRenderTimes?.[component] || time;
            const diff = time - baseTime;
            const pct = ((diff / baseTime) * 100).toFixed(1);
            console.log(\`- \${component}: \${time}ms (change: \${diff > 0 ? '+' : ''}\${diff}ms, \${pct}%)\`);
          }

          // Memory usage
          console.log('');
          console.log('### Memory Usage');
          const memDiff = current.memoryUsage.jsHeapUsedSize - (baseline.memoryUsage?.jsHeapUsedSize || current.memoryUsage.jsHeapUsedSize);
          const memPct = ((memDiff / (baseline.memoryUsage?.jsHeapUsedSize || current.memoryUsage.jsHeapUsedSize)) * 100).toFixed(1);
          console.log(\`- JS Heap Used: \${(current.memoryUsage.jsHeapUsedSize / 1024 / 1024).toFixed(1)}MB\`);
          console.log(\`- Change: \${memDiff > 0 ? '+' : ''}\${(memDiff / 1024 / 1024).toFixed(1)}MB (\${memPct}%)\`);

          // Bundle sizes
          console.log('');
          console.log('### Bundle Sizes');
          for (const [file, size] of Object.entries(current.bundleSizes)) {
            const baseSize = baseline.bundleSizes?.[file] || size;
            const diff = size - baseSize;
            const pct = ((diff / baseSize) * 100).toFixed(1);
            console.log(\`- \${file}: \${(size / 1024).toFixed(1)}KB (change: \${diff > 0 ? '+' : ''}\${(diff / 1024).toFixed(1)}KB, \${pct}%)\`);
          }

          // Check for regressions
          const regressions = [];
          if (loadTimeDiff > baseline.bundleLoadTime * 0.1) {
            regressions.push(\`Bundle load time increased by \${loadTimePct}%\`);
          }

          for (const [component, time] of Object.entries(current.componentRenderTimes)) {
            const baseTime = baseline.componentRenderTimes?.[component];
            if (baseTime && time > baseTime * 1.2) {
              regressions.push(\`\${component} render time increased by \${((time - baseTime) / baseTime * 100).toFixed(1)}%\`);
            }
          }

          if (regressions.length > 0) {
            console.log('');
            console.log('## ⚠️ Performance Regressions Detected');
            regressions.forEach(r => console.log(\`- \${r}\`));
            process.exit(1);
          } else {
            console.log('');
            console.log('## ✅ No significant performance regressions detected');
          }
          " >> $GITHUB_STEP_SUMMARY

      - name: Update baseline (on main branch)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: baseline-performance
          path: performance-results.json

  lighthouse-audit:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10.15.0'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Storybook
        run: pnpm run build-storybook

      - name: Run Lighthouse CI
        run: |
          pnpm install -g @lhci/cli@0.13.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: .lighthouseci/

  performance-summary:
    name: Performance Summary
    needs: [performance-benchmark, lighthouse-audit]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Create performance summary
        run: |
          echo "## 🎯 Performance Analysis Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Benchmarks | ${{ needs.performance-benchmark.result == 'success' && '✅ No Regressions' || '⚠️ Review Required' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Lighthouse Audit | ${{ needs.lighthouse-audit.result == 'success' && '✅ Passed' || '⚠️ Review Required' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 Detailed performance reports are available in the artifacts." >> $GITHUB_STEP_SUMMARY
