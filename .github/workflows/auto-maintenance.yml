name: Automated Maintenance

on:
  schedule:
    # Daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      force_commit:
        description: 'Force commit even with no changes'
        required: false
        default: 'false'
        type: boolean

jobs:
  auto-maintenance:
    runs-on: ubuntu-latest
    name: Automated Maintenance Tasks

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run automated maintenance tasks
        run: |
          echo "🤖 Running automated maintenance tasks..."
          
          # Update component status
          npm run docs:sync
          
          # Check for dependency updates (security patches only)
          npm audit fix --only=prod || echo "No security fixes needed"
          
          # Update package-lock if needed
          if [ -n "$(git diff package-lock.json)" ]; then
            echo "📦 Package lock updated"
          fi
          
          # Format any auto-generated files
          npm run format || echo "No formatting needed"

      - name: Check for changes
        id: check_changes
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "📋 Changes detected:"
            git status --short
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "ℹ️  No changes to commit"
          fi

      - name: Generate commit message
        if: steps.check_changes.outputs.changes == 'true' || github.event.inputs.force_commit == 'true'
        id: commit_message
        run: |
          # Analyze what changed
          CHANGED_FILES=$(git diff --name-only HEAD 2>/dev/null || echo "")
          
          if echo "$CHANGED_FILES" | grep -q "docs/component-status-report.md"; then
            COMMIT_TYPE="docs"
            COMMIT_SCOPE="status"
            COMMIT_DESC="update component status report"
          elif echo "$CHANGED_FILES" | grep -q "package-lock.json"; then
            COMMIT_TYPE="chore"
            COMMIT_SCOPE="deps"
            COMMIT_DESC="update dependencies"
          else
            COMMIT_TYPE="chore"
            COMMIT_SCOPE="maintenance"
            COMMIT_DESC="automated maintenance tasks"
          fi
          
          # Build commit message
          COMMIT_MSG="${COMMIT_TYPE}(${COMMIT_SCOPE}): ${COMMIT_DESC}

🤖 Automated maintenance performed:
$(echo "$CHANGED_FILES" | sed 's/^/- /')

Automated with GitHub Actions Maintenance Workflow

Co-Authored-By: GitHub Actions <noreply@github.com>"
          
          # Output for next step
          echo "message<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMIT_MSG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Commit and push changes
        if: steps.check_changes.outputs.changes == 'true' || github.event.inputs.force_commit == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Actions Maintenance"
          
          git add .
          git commit -m "${{ steps.commit_message.outputs.message }}"
          git push

      - name: Create summary
        run: |
          echo "## 🤖 Automated Maintenance Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Run Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.check_changes.outputs.changes }}" == "true" ]; then
            echo "**Status:** ✅ Changes committed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Files Updated:**" >> $GITHUB_STEP_SUMMARY
            git diff --name-only HEAD~1 HEAD | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY || echo "- No files changed" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Status:** ℹ️  No changes needed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tasks Performed:**" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 Component status synchronization" >> $GITHUB_STEP_SUMMARY
          echo "- 🔒 Security dependency updates" >> $GITHUB_STEP_SUMMARY
          echo "- 🎨 Code formatting" >> $GITHUB_STEP_SUMMARY

  dependency-updates:
    runs-on: ubuntu-latest
    name: Automated Dependency Updates
    if: github.event_name == 'schedule'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Check for USWDS updates
        id: uswds_check
        run: |
          npm ci
          
          CURRENT_VERSION=$(npm list @uswds/uswds --depth=0 --json | jq -r '.dependencies."@uswds/uswds".version')
          LATEST_VERSION=$(npm view @uswds/uswds version)
          
          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "latest=$LATEST_VERSION" >> $GITHUB_OUTPUT
          
          if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
            echo "update_available=true" >> $GITHUB_OUTPUT
            echo "🆕 USWDS update available: $CURRENT_VERSION → $LATEST_VERSION"
          else
            echo "update_available=false" >> $GITHUB_OUTPUT
            echo "✅ USWDS is up to date ($CURRENT_VERSION)"
          fi

      - name: Create USWDS update PR
        if: steps.uswds_check.outputs.update_available == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `🔄 Update USWDS to v${{ steps.uswds_check.outputs.latest }}`;
            const body = `
            ## USWDS Update Available
            
            **Current Version:** ${{ steps.uswds_check.outputs.current }}
            **Latest Version:** ${{ steps.uswds_check.outputs.latest }}
            
            ### Action Required
            1. Review [USWDS release notes](https://github.com/uswds/uswds/releases)
            2. Test components in Storybook after update
            3. Run full test suite
            4. Update component documentation if needed
            
            ### Automated Update Process
            \`\`\`bash
            npm update @uswds/uswds
            npm run uswds:compile
            npm run test
            npm run storybook  # Visual verification
            \`\`\`
            
            This issue was created automatically by the maintenance workflow.
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['dependencies', 'uswds', 'automated']
            });

  cleanup-old-branches:
    runs-on: ubuntu-latest
    name: Cleanup Old Branches
    if: github.event_name == 'schedule'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Delete merged branches
        run: |
          echo "🧹 Cleaning up merged branches..."
          
          # Get list of merged branches (exclude main and develop)
          MERGED_BRANCHES=$(git branch -r --merged origin/main | grep -v 'origin/main' | grep -v 'origin/HEAD' | sed 's/origin\///' | grep -E '^[^/]+/[^/]+$' || true)
          
          if [ -n "$MERGED_BRANCHES" ]; then
            echo "📋 Found merged branches to delete:"
            echo "$MERGED_BRANCHES"
            
            # This would require additional permissions to delete remote branches
            # For now, just report what would be deleted
            echo "$MERGED_BRANCHES" | wc -l | xargs echo "Would delete" | xargs echo "branches"
          else
            echo "✅ No merged branches to clean up"
          fi