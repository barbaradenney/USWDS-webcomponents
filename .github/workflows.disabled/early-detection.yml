name: 🔍 Early Issue Detection Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run comprehensive tests daily at 2 AM
    - cron: '0 2 * * *'

jobs:
  # PHASE 1: Fast Critical Validation (2-3 minutes)
  fast-validation:
    name: ⚡ Fast Critical Validation
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10.15.0'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: TypeScript Validation
        run: pnpm run typecheck

      - name: ESLint Validation
        run: pnpm run lint

      - name: USWDS Compliance Check
        run: pnpm run uswds:compliance:static

      - name: Critical Component Tests
        run: pnpm run test:critical

      - name: Layout Regression Tests
        run: pnpm run test:layout:ci

  # PHASE 2: AI-Powered Analysis (3-5 minutes)
  ai-analysis:
    name: 🤖 AI-Powered Issue Detection
    runs-on: ubuntu-latest
    needs: fast-validation
    timeout-minutes: 8

    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10.15.0'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: AI Test Gap Analysis
        run: pnpm run ai:analyze

      - name: Smart Test Recommendations
        run: pnpm run test:recommend:high

      - name: Predictive Regression Testing
        run: pnpm run test:predict:fast

      - name: Upload AI Analysis Results
        uses: actions/upload-artifact@v4
        with:
          name: ai-analysis-results
          path: test-reports/ai-analysis/

  # PHASE 3: Comprehensive Testing (10-15 minutes)
  comprehensive-testing:
    name: 🧪 Comprehensive Test Suite
    runs-on: ubuntu-latest
    needs: fast-validation
    timeout-minutes: 20
    strategy:
      matrix:
        test-type: [unit, component, integration, accessibility]

    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10.15.0'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Run Test Type - ${{ matrix.test-type }}
        run: |
          case "${{ matrix.test-type }}" in
            "unit")
              pnpm run test:coverage
              ;;
            "component")
              pnpm run cypress:run
              ;;
            "integration")
              pnpm run test:integration
              ;;
            "accessibility")
              pnpm run test:comprehensive:accessibility
              ;;
          esac

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-type }}
          path: test-reports/

  # PHASE 4: Advanced Validation (runs on schedule only)
  advanced-validation:
    name: 🎯 Advanced Issue Detection
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10.15.0'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Chaos Engineering Tests
        run: pnpm run test:chaos:medium

      - name: Cross-Browser Compatibility
        run: pnpm run test:cross-browser

      - name: Performance Testing
        run: pnpm run test:comprehensive:performance

      - name: Security Testing
        run: pnpm run test:comprehensive:security

      - name: Full USWDS Behavioral Testing
        run: pnpm run uswds:test-comprehensive

      - name: Generate Comprehensive Report
        run: pnpm run test:comprehensive:report

      - name: Upload Comprehensive Results
        uses: actions/upload-artifact@v4
        with:
          name: advanced-validation-results
          path: test-reports/comprehensive/

  # PHASE 5: Issue Alert System
  issue-detection:
    name: 🚨 Issue Detection & Alerts
    runs-on: ubuntu-latest
    needs: [fast-validation, ai-analysis, comprehensive-testing]
    if: always()

    steps:
      - uses: actions/checkout@v4

      - name: Download All Results
        uses: actions/download-artifact@v4

      - name: Analyze Results & Create Issues
        run: |
          # Create GitHub issues for detected problems
          if [ -f "ai-analysis-results/high-priority-issues.json" ]; then
            echo "High priority issues detected, creating GitHub issue..."
            # Script to create GitHub issue with findings
          fi

          # Check for test failures
          if [ -f "test-results-*/failures.json" ]; then
            echo "Test failures detected, analyzing patterns..."
            # Pattern analysis for recurring failures
          fi

      - name: Generate Daily Health Report
        if: github.event_name == 'schedule'
        run: |
          echo "Generating daily health report..."
          pnpm run showcase:testing > daily-health-report.md

      - name: Comment on PR with Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let comment = '## 🔍 Early Issue Detection Results\n\n';

            // Add AI analysis summary
            if (fs.existsSync('ai-analysis-results/summary.md')) {
              comment += fs.readFileSync('ai-analysis-results/summary.md', 'utf8');
            }

            // Add test results summary
            comment += '\n### Test Results Summary\n';
            comment += '- ✅ TypeScript: Passed\n';
            comment += '- ✅ ESLint: Passed\n';
            comment += '- ✅ USWDS Compliance: Passed\n';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
