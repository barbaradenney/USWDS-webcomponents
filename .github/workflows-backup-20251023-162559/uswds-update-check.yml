name: USWDS Update Monitor

on:
  schedule:
    # Check for USWDS updates every Monday at 9 AM EST
    - cron: '0 14 * * 1'
  workflow_dispatch: # Allow manual trigger

jobs:
  check-uswds-updates:
    name: Check USWDS Updates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check current USWDS version
        id: current-version
        run: |
          CURRENT=$(node -p "require('./package.json').dependencies['@uswds/uswds']")
          echo "current=$CURRENT" >> $GITHUB_OUTPUT
          echo "Current USWDS version: $CURRENT"

      - name: Check latest USWDS version
        id: latest-version
        run: |
          LATEST=$(npm view @uswds/uswds version)
          echo "latest=$LATEST" >> $GITHUB_OUTPUT
          echo "Latest USWDS version: $LATEST"

      - name: Compare versions
        id: version-check
        run: |
          CURRENT="${{ steps.current-version.outputs.current }}"
          LATEST="${{ steps.latest-version.outputs.latest }}"

          # Remove any version prefixes (^, ~, etc.)
          CURRENT_CLEAN=$(echo $CURRENT | sed 's/[^0-9.]//g')

          if [ "$CURRENT_CLEAN" != "$LATEST" ]; then
            echo "update-available=true" >> $GITHUB_OUTPUT
            echo "🔄 USWDS update available: $CURRENT_CLEAN → $LATEST"
          else
            echo "update-available=false" >> $GITHUB_OUTPUT
            echo "✅ USWDS is up to date: $LATEST"
          fi

      - name: Fetch USWDS release notes
        if: steps.version-check.outputs.update-available == 'true'
        id: release-notes
        run: |
          LATEST="${{ steps.latest-version.outputs.latest }}"
          # Fetch release notes from GitHub API
          RELEASE_DATA=$(curl -s "https://api.github.com/repos/uswds/uswds/releases/tags/v$LATEST")

          # Extract release body and save to file
          echo "$RELEASE_DATA" | jq -r '.body' > release-notes.md

          # Check for breaking changes indicators
          BREAKING_CHANGES=$(echo "$RELEASE_DATA" | jq -r '.body' | grep -i "breaking\|major\|migration" || echo "")
          if [ -n "$BREAKING_CHANGES" ]; then
            echo "breaking-changes=true" >> $GITHUB_OUTPUT
          else
            echo "breaking-changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Analyze CSS changes
        if: steps.version-check.outputs.update-available == 'true'
        run: |
          LATEST="${{ steps.latest-version.outputs.latest }}"

          # Create temp directory for analysis
          mkdir -p temp-uswds-analysis
          cd temp-uswds-analysis

          # Download and extract new USWDS version
          npm pack @uswds/uswds@$LATEST
          tar -xzf uswds-*.tgz

          # Compare CSS structure (simplified analysis)
          echo "## 🎨 CSS Changes Analysis" > ../css-analysis.md
          echo "" >> ../css-analysis.md

          # List new CSS files
          echo "### New CSS Files:" >> ../css-analysis.md
          find package/packages -name "*.scss" | head -20 | while read file; do
            echo "- $file" >> ../css-analysis.md
          done

          # Check for component changes
          echo "" >> ../css-analysis.md
          echo "### Component Structure:" >> ../css-analysis.md
          ls package/packages/ | grep -E "^usa-" | head -10 | while read component; do
            echo "- $component" >> ../css-analysis.md
          done

          cd ..

      - name: Create test branch with USWDS update
        if: steps.version-check.outputs.update-available == 'true'
        run: |
          LATEST="${{ steps.latest-version.outputs.latest }}"
          BRANCH_NAME="uswds-update-v$LATEST"

          # Create and switch to new branch
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b $BRANCH_NAME

          # Update package.json
          npm install @uswds/uswds@$LATEST

          # Run build to check for immediate issues
          npm run build || echo "Build failed - manual intervention required"

          # Stage changes
          git add package.json package-lock.json

          # Commit if there are changes
          if ! git diff --staged --quiet; then
            git commit -m "chore(deps): update @uswds/uswds to v$LATEST

            Updates USWDS to the latest version. This is an automated update.
            
            🔍 Please review:
            - Breaking changes: ${{ steps.release-notes.outputs.breaking-changes }}
            - Component compatibility
            - Visual regression tests
            - Accessibility compliance
            
            Release notes and CSS analysis are attached to the related issue."
          fi

          echo "branch-name=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Run compatibility tests
        if: steps.version-check.outputs.update-available == 'true'
        continue-on-error: true
        run: |
          echo "Running compatibility tests..."

          # Run linting
          npm run lint || echo "⚠️ Linting issues detected"

          # Run type checking
          npm run typecheck || echo "⚠️ Type checking issues detected"

          # Run unit tests
          npm test || echo "⚠️ Unit test failures detected"

          # Check bundle size impact
          npm run build

          # Save test results
          echo "## 🧪 Compatibility Test Results" > test-results.md
          echo "- Linting: $(npm run lint >/dev/null 2>&1 && echo '✅ Passed' || echo '❌ Failed')" >> test-results.md
          echo "- Type Checking: $(npm run typecheck >/dev/null 2>&1 && echo '✅ Passed' || echo '❌ Failed')" >> test-results.md
          echo "- Unit Tests: $(npm test >/dev/null 2>&1 && echo '✅ Passed' || echo '❌ Failed')" >> test-results.md

      - name: Create issue for USWDS update
        if: steps.version-check.outputs.update-available == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const latest = '${{ steps.latest-version.outputs.latest }}';
            const current = '${{ steps.current-version.outputs.current }}';
            const breakingChanges = '${{ steps.release-notes.outputs.breaking-changes }}' === 'true';

            let releaseNotes = '';
            try {
              releaseNotes = fs.readFileSync('release-notes.md', 'utf8');
            } catch (e) {
              releaseNotes = 'Release notes could not be fetched.';
            }

            let cssAnalysis = '';
            try {
              cssAnalysis = fs.readFileSync('css-analysis.md', 'utf8');
            } catch (e) {
              cssAnalysis = '**CSS analysis could not be completed.**';
            }

            let testResults = '';
            try {
              testResults = fs.readFileSync('test-results.md', 'utf8');
            } catch (e) {
              testResults = '**Compatibility tests could not be completed.**';
            }

            const issueBody = `
            # 🔄 USWDS Update Available: v${latest}

            **Current Version:** ${current}  
            **Latest Version:** ${latest}  
            **Breaking Changes:** ${breakingChanges ? '⚠️ Yes' : '✅ No'}

            ## 📋 Action Items

            - [ ] Review release notes below
            - [ ] Check CSS compatibility analysis
            - [ ] Run visual regression tests
            - [ ] Test component functionality
            - [ ] Update component tests if needed
            - [ ] Verify accessibility compliance
            - [ ] Update documentation if needed

            ## 📝 Release Notes

            ${releaseNotes}

            ---

            ${cssAnalysis}

            ---

            ${testResults}

            ## 🚀 Next Steps

            1. Review the automated test branch: \`uswds-update-v${latest}\`
            2. Run comprehensive tests locally
            3. Create PR when ready to merge
            4. Close this issue after successful update

            ---

            *This issue was automatically created by the USWDS Update Monitor workflow.*
            `;

            const { data: issue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🔄 USWDS Update: v${current} → v${latest}${breakingChanges ? ' (Breaking Changes)' : ''}`,
              body: issueBody,
              labels: ['uswds-update', 'dependencies', breakingChanges ? 'breaking-change' : 'enhancement'],
              assignees: ['barbaramiles']
            });

            console.log(`Created issue #${issue.number}`);

      - name: Push test branch
        if: steps.version-check.outputs.update-available == 'true'
        run: |
          git push origin ${{ env.branch-name }} || echo "Failed to push branch"

      - name: Create summary
        run: |
          if [ "${{ steps.version-check.outputs.update-available }}" == "true" ]; then
            echo "## 🔄 USWDS Update Available" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Current:** ${{ steps.current-version.outputs.current }}" >> $GITHUB_STEP_SUMMARY
            echo "**Latest:** ${{ steps.latest-version.outputs.latest }}" >> $GITHUB_STEP_SUMMARY
            echo "**Breaking Changes:** ${{ steps.release-notes.outputs.breaking-changes == 'true' && '⚠️ Yes' || '✅ No' }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "📋 An issue has been created with update details and action items." >> $GITHUB_STEP_SUMMARY
            echo "🔧 A test branch has been created for compatibility testing." >> $GITHUB_STEP_SUMMARY
          else
            echo "## ✅ USWDS Up to Date" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Current version ${{ steps.latest-version.outputs.latest }} is the latest available." >> $GITHUB_STEP_SUMMARY
          fi
